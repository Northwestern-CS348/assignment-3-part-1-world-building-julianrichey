"""
For a game where there are 5 disks,
write down the Facts and Rules to model the game state where 
disk1 (the smallest) is on peg3
disk2 (the second smallest) is on peg2, and
other disks are on peg1.

        |            |            |
        |            |            |
        |            |            |
        |            |            |
     ---|--- disk3   |            |
    ----|----        |            |
   -----|-----     --|-- disk2   -|- disk1
==========================================
       peg1         peg2         peg3
       
Example: 
fact: (pred obj1 obj2)
rule: ((pred obj1 obj2) (pred obj2 obj3)) -> (pred obj1 obj3)

"""

#situation specific

fact: (on disk1 peg3)
fact: (on disk2 peg2)
fact: (on disk3 peg1)
fact: (on disk4 peg1)
fact: (on disk5 peg1)

fact: (on_top disk1)
fact: (on_top disk2)
fact: (on_top disk3)


#general setup

fact: (inst disk1 disk)
fact: (inst disk2 disk)
fact: (inst disk3 disk)
fact: (inst disk4 disk)
fact: (inst disk5 disk)

fact: (inst peg1 peg)
fact: (inst peg2 peg)
fact: (inst peg3 peg)

fact: (larger disk5 disk4)
fact: (larger disk4 disk3)
fact: (larger disk3 disk2)
fact: (larger disk2 disk1)

#larger
rule: ((larger ?x ?y) (larger ?y ?z)) -> (larger ?x ?z)

#movable (target not empty)
rule: ((inst ?diskA disk) (inst ?pegA peg) (on ?diskA ?pegA) (on_top ?diskA) (inst ?diskB disk) (inst ?pegB peg) (on ?diskB ?pegB) (on_top ?diskB) (larger ?diskB ?diskA)) -> (movable ?diskA ?pegA ?pegB)

#movable (target empty) WORKS
rule: ((inst ?diskA disk) (inst ?pegA peg) (on ?diskA ?pegA) (on_top ?diskA) (inst ?pegB peg) (empty ?pegB)) -> (movable ?diskA ?pegA ?pegB)